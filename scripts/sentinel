#!/usr/bin/env python3
"""A script to listen for alerts and insert them into the database."""

import os
import sys

from gtecs.alert import params
from gtecs.alert.listener import run
from gtecs.alert.slack import send_slack_msg
from gtecs.control import errors  # Should be in common?
from gtecs.control import misc  # Should be in common?


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    # Primary control
    elif command == 'start':
        # Check it it's already running
        pid = misc.get_pid('sentinel')
        if pid:
            print('Sentinel already running (PID {})'.format(pid))
            send_slack_msg('Sentinel tried to start, but is already running')
            return

        with misc.make_pid_file('sentinel'):
            run()

    elif command == 'ping':
        pid = misc.get_pid('sentinel')
        if pid:
            print('Sentinel is running (PID {})'.format(pid))
        else:
            print('Sentinel is not running')

    elif command == 'kill':
        if not misc.get_pid('sentinel'):
            print('Sentinel is not running')
            return

        misc.kill_process('sentinel')

    elif command in ['log', 'tail']:
        log_path = os.path.join(params.LOG_PATH, 'sentinel.log')
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))

        misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_instructions():
    """Print instructions for using the script."""
    print('Usage: sentinel command [options]',
          'The sentinel is listens for alerts and inserts them into the database.',
          '',
          'Commands:',
          '   start                  start the sentinel',
          '   ping                   check if the sentinel is running',
          '   kill                   kill the sentinel',
          '   log [tail args]        print sentinel log (alias for tail)',
          '   help                   print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        query(command, args)
